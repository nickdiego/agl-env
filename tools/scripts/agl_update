#!/usr/bin/env bash
# vim: ts=2 sw=2 et filetype=sh

set -e

REMOTE=${REMOTE:-0} # Run in remote build mode
BUILD=${BUILD:-0} # Build the artifact(s) before fetching/installing?

TARGET="${TARGET:-raspberrypi3}"
TARGET_SSH="${DEVICE:-rpi}"

# AGL/Yocto workspace path (assuming defaults: branch=flounder target=rpi3)
WS_PATH="${AGL_WS:+$AGL_WS/flounder-rpi3}"

# AGL Image vars
AGL_DEMO_TASK='agl-demo-platform'
IMG_PREFIX="${AGL_DEMO_TASK}-${TARGET}"
IMG_FILE_NAME="${IMG_PREFIX}.wic.xz"
IMG_DBG_FILES=("${IMG_PREFIX}.tar.xz" "${IMG_PREFIX}-dgb.tar.gz")
BUILD_PATH="${WS_PATH}/build"
IMG_DIR="${BUILD_PATH}/tmp/deploy/images/${TARGET}"
IMG_PATH="${IMG_DIR}/${IMG_FILE_NAME}"

if (( REMOTE )); then
  # Remote setup-related vars
  FETCH=${FETCH:-1} # Fetch the artifact(s) from the build server?
  FETCH_DBG=${FETCH_DBG:-0} # Fetch the debug artifact(s) from the build server?
  SERVER="${SERVER:-igalia}"
  IMG_REMOTE_DIR="${SERVER}:${IMG_DIR}"
else
  if [ ! -d "$BUILD_PATH" ]; then
    echo "Error: Build path does not exists '$BUILD_PATH'" >&2
    exit 1
  fi
  FETCH=0
  FETCH_DBG=0
fi

SCRIPT_TEMPLATE=$(cat <<-END
  cd $BUILD_PATH
  source agl-init-build-env
  set -e
  %s
END
)

# set package vars
# FIXME: Supporting only RPi for now
download_file() {
  rsync -arvzL --progress "$1" "$2"
}

fetch_image() {
  local image_path=$1
  if (( BUILD )); then
    echo '### Building whole AGL WAM demo image...'
    build_script=$(printf "$SCRIPT_TEMPLATE" "bitbake ${AGL_DEMO_TASK}")
    ssh $SERVER -t eval "$build_script"
  fi
  if (( FETCH )); then
      echo '### Downloading...'
      download_file "${SERVER}:${image_path}"
  fi
  if (( FETCH_DBG )); then
      echo '### Downloading debug files...'
      for file in "${IMG_DBG_FILES[@]}"; do
        download_file "${IMG_REMOTE_DIR}/$file" .
      done
  fi
}

flash_image() {
  local image_path=$1
  local sdcard='/dev/mmcblk0'
  if ! lsblk ${sdcard} &>/dev/null; then
      echo "### SDCard not found, please insert it!" >&2
      return 1
  fi
  echo "--- Writing to sdcard..." >&2
  echo "----> img=${image_path}" >&2
  time (xzcat $image_path | sudo dd of=${sdcard} bs=4M status=progress && sync)
}

# TODO: Mostly broken. Fix it!
fetch_and_install_remote_pkg() {
  local pkgname="${1:-chromium68}"
  local pkg_file_name="${pkgname}-1.0*.armv7vehf_neon_vfpv4.rpm"
  local pkg_path="${BUILD_PATH}/tmp/deploy/rpm/armv7vehf_neon_vfpv4"

  if (( BUILD )); then
    echo '### Building...'
    build_script=$(printf "$SCRIPT_TEMPLATE" "bitbake -C compile $pkgname")
    ssh $SERVER -t eval "$build_script"
  fi
  if (( FETCH )); then
      echo '### Downloading...'
      scp "${SERVER}:${pkg_path}/${pkg_file_name}" .
  fi
  echo "### Copying to ${TARGET}..."
  scp $pkg_file_name ${TARGET_SSH}:/tmp/
  echo '### Installing...'
  ssh ${TARGET_SSH} -- rpm -Uvh --force /tmp/${pkg_file_name}
}

install_demo_apps() {
  if [ ! -d $AGL_DIR ]; then
    echo "Error: AGL_DIR env var not set!"
    return 1
  fi

  local demos_src_dir="${AGL_DIR}/src/wam-demo-applications"
  local demos_to_install=(memory-match aquarium)
  (
    cd $demos_src_dir && make && cd package
    for demo in "${demos_to_install[@]}"; do
      local pkg="${demo}.wgt"
      echo "Installing ${pkg}.." >&2
      scp "$pkg" "${TARGET_SSH}:/tmp"
      ssh $TARGET_SSH -- afm-util install "/tmp/${pkg}"
    done
  )

  # TODO: Move to another place
  local weston_config_path=/etc/xdg/weston/weston.ini
  echo "Updating weston config for tests.."
  scp ${AGL_DIR}/debug/rpi-weston.ini ${TARGET_SSH}:${weston_config_path}
}


ARTIFACTS="${@:-chromium68}"

for artifact in "$ARTIFACTS"; do
  case "$artifact" in
    image)
      echo "-- Updating whole AGL image" >&2
      (( REMOTE )) && fetch_image "$IMG_PATH"
      flash_image "$IMG_PATH"
      ;;
    demos)
      echo "-- Updating demo apps" >&2
      install_demo_apps
      ;;
    *)
      echo "-- Updating package: ${artifact}" >&2
      if (( REMOTE )); then
        fetch_and_install_remote_pkg $artifact
      else
        echo "TODO: Support local build pkg upgrade through devtool!"
        exit 1
      fi
      ;;
  esac
done

echo '### Done.'
